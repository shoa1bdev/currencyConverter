{"version":3,"sources":["CurrencyRow.js","App.js","reportWebVitals.js","index.js"],"names":["CurrencyRow","props","currentCurrency","selectCurrency","onChangeCurrency","amount","onChangeAmount","className","type","value","onChange","map","currency","App","toAmount","fromAmount","BASE_URL","useState","setCurrentCurrency","toCurrency","setToCurrency","fromCurrency","setFromCurrency","exchangeRates","setExchangeRates","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAuBeA,EAvBK,SAACC,GAAW,IAG5BC,EAKED,EALFC,gBACAC,EAIEF,EAJFE,eACAC,EAGEH,EAHFG,iBACAC,EAEEJ,EAFFI,OACAC,EACEL,EADFK,eAGF,OACE,sBAAKC,UAAU,SAAf,UACC,uBAAOC,KAAK,SAASC,MAAOJ,EAAQK,SAAUJ,IAC9C,wBAAQG,MAAON,EAAgBO,SAAUN,EAAzC,SACCF,EAAgBS,KAAI,SAAAC,GACnB,OAAO,wBAAuBH,MAAOG,EAA9B,SAAyCA,GAA5BA,YC4DZC,MAxEf,WACE,IAQIC,EAAUC,EARRC,EAAW,yCADJ,EAEgCC,mBAAS,IAFzC,mBAENf,EAFM,KAEUgB,EAFV,OAGsBD,qBAHtB,mBAGNE,EAHM,KAGKC,EAHL,OAI0BH,qBAJ1B,mBAINI,EAJM,KAIOC,EAJP,OAK4BL,qBAL5B,mBAKNM,EALM,KAKQC,EALR,OAMcP,mBAAS,GANvB,mBAMNZ,EANM,KAMCoB,EAND,OAO0CR,oBAAS,GAPnD,mBAONS,EAPM,KAOeC,EAPf,KAgDb,OArCID,GACFX,EAAaV,EACbS,EAAWT,EAASkB,IAEpBT,EAAWT,EACXU,EAAaV,EAASkB,GAYxBK,qBAAU,WACVC,MAAMb,GACLc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDf,EAAgBW,EAAKK,MACrBlB,EAAcc,GACdV,EAAiBS,EAAKI,MAAMH,SAE5B,IAEFN,qBAAU,WACPP,GAAgBF,GACjBU,MAAM,GAAD,OAAIb,EAAJ,iBAAqBK,EAArB,oBAA6CF,IACjDW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAiBS,EAAKI,MAAMlB,SAE5C,CAACE,EAAcF,IAGb,qCACA,yCACA,sBAAKZ,UAAU,YAAf,UACE,cAAC,EAAD,CACAL,gBAAiBA,EACjBC,eAAgBkB,EAChBjB,iBAAkB,SAAAmC,GAAC,OAAIjB,EAAgBiB,EAAEC,OAAO/B,QAChDJ,OAAQU,EACRT,eAtC2B,SAACiC,GAC9Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,MAsCtB,mCACA,cAAC,EAAD,CACAzB,gBAAiBA,EACjBC,eAAgBgB,EAChBf,iBAAkB,SAAAmC,GAAC,OAAInB,EAAcmB,EAAEC,OAAO/B,QAC9CJ,OAAQS,EACRR,eA1CyB,SAACiC,GAC5Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,aChBbc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.262a60b4.chunk.js","sourcesContent":["const CurrencyRow = (props) => {\n  \n  const {\n    currentCurrency,\n    selectCurrency,\n    onChangeCurrency,\n    amount,\n    onChangeAmount\n  } = props\n  \n  return(\n    <div className=\"inputs\">\n     <input type=\"number\" value={amount} onChange={onChangeAmount} />\n     <select value={selectCurrency} onChange={onChangeCurrency}>\n     {currentCurrency.map(currency => {\n       return <option key={currency} value={currency}>{currency}</option>\n     })}\n     </select>\n    </div>\n    )\n  \n}\n\nexport default CurrencyRow","import { useState, useEffect } from 'react'\nimport CurrencyRow from './CurrencyRow.js'\n\nfunction App() {\n  const BASE_URL = 'https://api.exchangeratesapi.io/latest'\n  const [currentCurrency,setCurrentCurrency] = useState([])\n  const [toCurrency,setToCurrency] = useState()\n  const [fromCurrency,setFromCurrency] = useState()\n  const [exchangeRates,setExchangeRates] = useState()\n  const [amount,setAmount] = useState(1)\n  const [amountInFromCurrency,setAmountInFromCurrency] = useState(true)\n  \n  let toAmount, fromAmount\n  \n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRates\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRates\n  }\n  \n  const handleFromChangeAmount = (e) => {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n  const handleToChangeAmount = (e) => {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n  \n  useEffect(() => {\n  fetch(BASE_URL)\n  .then(res => res.json())\n  .then(data => {\n    const firstCurrency = Object.keys(data.rates)[0]\n    setCurrentCurrency([data.base, ...Object.keys(data.rates)])\n    setFromCurrency(data.base)\n    setToCurrency(firstCurrency)\n    setExchangeRates(data.rates[firstCurrency])\n  })\n  },[])\n  \n  useEffect(() => {\n  if(fromCurrency && toCurrency) {\n    fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n    .then(res => res.json())\n    .then(data => setExchangeRates(data.rates[toCurrency]))\n  }\n},[fromCurrency, toCurrency]) \n  \n  return (\n    <>\n    <h1>Convert</h1>\n    <div className=\"container\">\n      <CurrencyRow\n      currentCurrency={currentCurrency}\n      selectCurrency={fromCurrency}\n      onChangeCurrency={e => setFromCurrency(e.target.value)}\n      amount={fromAmount}\n      onChangeAmount={handleFromChangeAmount}\n      />\n      <h1>=</h1>\n      <CurrencyRow \n      currentCurrency={currentCurrency}\n      selectCurrency={toCurrency}\n      onChangeCurrency={e => setToCurrency(e.target.value)}\n      amount={toAmount}\n      onChangeAmount={handleToChangeAmount}\n      />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}